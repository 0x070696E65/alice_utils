@page "/"
@using BlazorStrap
@using aLice_utils.Shared.Models
@using Microsoft.AspNetCore.Components.Rendering
@using aLice_utils.Client.Services

<PageTitle>Generate</PageTitle>

<h1>Generate</h1>
<BSInputGroup MarginBottom="Margins.Medium">
    <BSInput InputType="InputType.Select" @bind-Value="SelectedOption" @onchange="HandleSelectionChange">
        @foreach (var option in TransactionTypeExtension.GetTransactionTypeList())
        {
            <option value="@option">@option</option>
        }
    </BSInput>
</BSInputGroup>

@code {
    string SelectedOption = "TransferTransaction";
    
    void HandleSelectionChange(ChangeEventArgs args)
    {
        if (Enum.TryParse(args.Value?.ToString(), out TransactionType selectedEnumValue))
        {
            SelectedOption = selectedEnumValue.ToString();
        }
    }
    
    static RenderFragment BuildForm(string transactionType) => builder =>
    {
        try
        {
            if (transactionType  == "AggregateCompleteTransaction")
            {
                builder.OpenComponent(0, Type.GetType($"aLice_utils.Client.Components.TransactionForms.AggregateCompleteTransaction") ?? throw new InvalidOperationException());
                builder.CloseComponent();
            }
            else
            {
                var transaction = SymbolBuilderService.CreateTransactionInstance(transactionType);
                var type = transaction.GetType();
                builder.OpenComponent(0, Type.GetType($"aLice_utils.Client.Components.TransactionForms.TransactionForm") ?? throw new InvalidOperationException());
                builder.AddAttribute(1, "Transaction", transaction);
                void Body(RenderTreeBuilder bodyBuilder)
                {
                    var innerTransactionProperty = type.GetProperty("InnerTransaction");
                    if (innerTransactionProperty == null) throw new Exception("InnerTransaction property is null");
                    var innerTransactionValue = innerTransactionProperty.GetValue(transaction);
                    
                    var transactionMetaProperty = type.GetProperty("TransactionMeta");
                    if (transactionMetaProperty == null) throw new Exception("TransactionMeta property is null");
                    var transactionMetaValue = transactionMetaProperty.GetValue(transaction);
                    bodyBuilder.OpenComponent(0, Type.GetType($"aLice_utils.Client.Components.TransactionForms.{transactionType}") ?? throw new InvalidOperationException());
                    bodyBuilder.AddAttribute(1, "InnerTransaction", innerTransactionValue);
                    bodyBuilder.AddAttribute(2, "TransactionMeta", transactionMetaValue);
                    bodyBuilder.CloseComponent();
                }
                builder.AddAttribute(2, "TransactionBody", (RenderFragment) Body);
                builder.CloseComponent();   
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            Console.WriteLine(e.StackTrace);
            builder.OpenElement(0, "div");
            builder.AddContent(0, $"Transaction type {transactionType} is not implemented yet");
            builder.CloseElement();
        }
    };
}
@BuildForm(SelectedOption)

