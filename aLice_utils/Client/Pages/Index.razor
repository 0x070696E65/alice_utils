@page "/"
@using BlazorStrap
@using aLice_utils.Shared.Models
@using Microsoft.AspNetCore.Components.Rendering
@using aLice_utils.Client.Services
@using aLice_utils.Shared.Models.Transaction

<PageTitle>Generate</PageTitle>

<h1>Generate</h1>
<BSDropdown>
    <Toggler><BSToggle IsButton="true" Color="BSColor.Secondary">Transaction</BSToggle></Toggler>
    <Content>
        @foreach (var option in TransactionTypeExtension.GetTransactionTypeList())
        {
            <BSDropdownItem OnClick="() => AddTransaction(option)">@option</BSDropdownItem>
        }
    </Content>
</BSDropdown>

<BSRow MarginBottom="Margins.Medium" MarginTop="Margins.Medium">
    @foreach (var transactionComponent in transactionComponents)
    {
        <BSCard CardType="CardType.Card" MarginBottom="Margins.Medium" PaddingTop="Padding.Medium">
            @transactionComponent.Value
            <BSCol MarginBottom="Margins.Medium" Column="3">
                <BSButton Color="BSColor.Danger" IsOutlined="true" OnClick="() => RemoveTransaction(transactionComponent.Key)">-</BSButton>
            </BSCol>
        </BSCard>
    }
</BSRow>

@code {
    private readonly Dictionary<string, RenderFragment> transactionComponents = new ();
    private readonly Dictionary<string, BaseTransaction> transactions = new ();
    private int componentCounter;
    
    private (BaseTransaction, RenderFragment) BuildForm(string transactionType, string uniqueKey)
    {
        componentCounter++;
        var localCounter = componentCounter;
        var transaction = (BaseTransaction)SymbolBuilderService.CreateTransactionInstance(transactionType);
        return (transaction, builder =>
        {
            try
            {
                var type = transaction.GetType();
                builder.OpenComponent(localCounter, Type.GetType($"aLice_utils.Client.Components.TransactionForms.TransactionForm") ?? throw new InvalidOperationException());
                builder.AddAttribute(localCounter, "Transaction", transaction);
                
                if (transactionType.Contains("Aggregate"))
                {
                    void Body(RenderTreeBuilder bodyBuilder)
                    {
                        var transactionMetaProperty = type.GetProperty("TransactionMeta");
                        if (transactionMetaProperty == null) throw new Exception("TransactionMeta property is null");
                        var transactionMetaValue = transactionMetaProperty.GetValue(transaction);
                        bodyBuilder.OpenComponent(localCounter, Type.GetType($"aLice_utils.Client.Components.TransactionForms.AggregateTransaction") ?? throw new InvalidOperationException());
                        bodyBuilder.AddAttribute(localCounter, "InnerTransaction", transaction);
                        bodyBuilder.AddAttribute(localCounter, "TransactionMeta", transactionMetaValue);
                        bodyBuilder.CloseComponent();
                    }

                    builder.AddAttribute(localCounter, "TransactionBody", (RenderFragment) Body);
                }
                else if(transactionType == "OfflineRebuildTransaction")
                {
                    void Body(RenderTreeBuilder bodyBuilder)
                    {
                        var transactionMetaProperty = type.GetProperty("TransactionMeta");
                        if (transactionMetaProperty == null) throw new Exception("TransactionMeta property is null");
                        var transactionMetaValue = transactionMetaProperty.GetValue(transaction);
                        bodyBuilder.OpenComponent(localCounter, Type.GetType($"aLice_utils.Client.Components.TransactionForms.OfflineRebuildTransaction") ?? throw new InvalidOperationException());
                        bodyBuilder.AddAttribute(localCounter, "InnerTransaction", transaction);
                        bodyBuilder.AddAttribute(localCounter, "TransactionMeta", transactionMetaValue);
                        bodyBuilder.CloseComponent();
                    }

                    builder.AddAttribute(localCounter, "TransactionBody", (RenderFragment) Body);
                }
                else
                {
                    void Body(RenderTreeBuilder bodyBuilder)
                    {
                        var innerTransactionProperty = type.GetProperty("InnerTransaction");
                        if (innerTransactionProperty == null) throw new Exception("InnerTransaction property is null");
                        var innerTransactionValue = innerTransactionProperty.GetValue(transaction);

                        var transactionMetaProperty = type.GetProperty("TransactionMeta");
                        if (transactionMetaProperty == null) throw new Exception("TransactionMeta property is null");
                        var transactionMetaValue = transactionMetaProperty.GetValue(transaction);
                        bodyBuilder.OpenComponent(localCounter, Type.GetType($"aLice_utils.Client.Components.TransactionForms.{transactionType}") ?? throw new InvalidOperationException());
                        bodyBuilder.AddAttribute(localCounter, "InnerTransaction", innerTransactionValue);
                        bodyBuilder.AddAttribute(localCounter, "TransactionMeta", transactionMetaValue);
                        bodyBuilder.CloseComponent();
                    }
                    builder.AddAttribute(localCounter, "TransactionBody", (RenderFragment) Body);
                }
                builder.CloseComponent();
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                Console.WriteLine(e.StackTrace);
                builder.OpenElement(0, "div");
                builder.AddContent(0, $"Transaction type {transactionType} is not implemented yet");
                builder.CloseElement();
            }
        });
    }
    
    private void AddTransaction(string option)
    {
        var uniqueKey = GenerateUniqueKey(option);
        var (tx,transactionComponent)= BuildForm(option, uniqueKey);
        transactions.Add(uniqueKey, tx);
        transactionComponents.Add(uniqueKey, transactionComponent);
    }
    
    private void RemoveTransaction(string key)
    {
        transactionComponents.Remove(key);
        transactions.Remove(key);
    }
    
    private static string GenerateUniqueKey(string option)
    {
        return $"{option}_{DateTime.Now.Ticks}";
    }
}

