@using BlazorStrap
@using CatSdk.Symbol
@using CatSdk.Utils
@using aLice_utils.Client.Services
@using System.Net.WebSockets
@using System.Text
@using System.Text.Json.Nodes
@using CatSdk.Facade
@using System.Globalization
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject WebSocketService WebSocketService

<h3>Metal Scrap</h3>
<BSRow MarginBottom="Margins.Medium">
    <BSInputGroup>
        <span class="@BS.Input_Group_Text">NetworkType</span>
        <BSInputCheckbox CheckedValue="@("MainNet")" UnCheckedValue="@("TestNet")" IsToggle="true" Color="BSColor.Secondary" ValueChanged="@((string value) => OnNetworkTypeChanged(value))">
            @NetworkType
        </BSInputCheckbox>
    </BSInputGroup>
</BSRow>
<BSRow MarginBottom="Margins.Medium">
    <BSInputGroup>
        <span class="@BS.Input_Group_Text">Node</span>
        <BSInput InputType="InputType.Text" placeholder="Node" @bind-Value="Node"/>
    </BSInputGroup>
</BSRow>

<BSRow MarginBottom="Margins.Medium">
    <BSInputGroup>
        <span class="@BS.Input_Group_Text">SourcePublicKey</span>
        <BSInput InputType="InputType.Text" placeholder="PublicKey" @bind-Value="SourcePublicKey"/>
    </BSInputGroup>
</BSRow>
<BSRow MarginBottom="Margins.Medium">
    <BSInputGroup>
        <span class="@BS.Input_Group_Text">TargetPublicKey</span>
        <BSInput InputType="InputType.Text" placeholder="TargetPublicKey" @bind-Value="TargetPublicKey"/>
    </BSInputGroup>
</BSRow>
<BSRow MarginBottom="Margins.Medium">
    <BSInputGroup>
        <span class="@BS.Input_Group_Text">MetalID</span>
        <BSInput InputType="InputType.Text" placeholder="MetalID" @bind-Value="metalId"/>
    </BSInputGroup>
</BSRow>
@if (!isScraped)
{
    <BSRow MarginBottom="Margins.Medium">
        <BSCol>
            <BSButton OnClick="@OnScrap" Color="BSColor.Primary">Scrap</BSButton>
        </BSCol>
    </BSRow>   
}
@if (IsScrapSpinner)
{
    <BSContainer>
        <BSRow MarginBottom="Margins.Medium" Justify="Justify.Center">
            <BSCol Column="2">
                <BSSpinner Color="BSColor.Secondary" Class="align-content-center"/>
            </BSCol>
        </BSRow>
    </BSContainer>
}
@if (isScraped)
{
    <BSRow MarginBottom="Margins.Medium">
        <BSCol>
            <BSButton Color="BSColor.Success" OnClick="@OpenAlice">To aLice</BSButton>
        </BSCol>
    </BSRow>
    <BSRow MarginBottom="Margins.Medium">
        <BSCol>
            <BSButton OnClick="@OnConnect" Color="BSColor.Primary">Connect</BSButton>
        </BSCol>
    </BSRow>
}

@if (IsSpinner)
{
    <BSContainer>
        <BSRow MarginBottom="Margins.Medium" Justify="Justify.Center">
            <BSCol Column="2">
                <BSSpinner Color="BSColor.Secondary" Class="align-content-center"/>
            </BSCol>
        </BSRow>
    </BSContainer>
}

@if (isAnnouceSuccessed)
{
    <BSRow MarginBottom="Margins.Medium">
        <BSCol>
            <BSLabel Class="text-info">Scrap Succeeded!!</BSLabel>
        </BSCol>
    </BSRow>
}

<BSRow MarginBottom="Margins.Medium">
    <BSCol>
        <BSLabel Class="text-danger">@errorMessage</BSLabel>
    </BSCol>
</BSRow>

@code {
    private string? SourcePublicKey { get; set; }
    private string? TargetPublicKey { get; set; }
    private string? address { get; set; }
    private bool isScraped;
    private bool isAnnouceSuccessed;
    private string? alice;
    private string? metalId;
    private string? uid;
    private string? Node;
    private bool IsSpinner;
    private bool IsScrapSpinner;
    private string? NetworkType;
    
    private MetalService? MetalService;
    private SymbolService? SymbolService;
    private readonly NodeServices NodeServices = new NodeServices();
    
    private readonly List<Result>? results = new ();
    
    private string? errorMessage;
    
    protected override async void OnInitialized()
    {
        await base.OnInitializedAsync();
        uid = Guid.NewGuid().ToString();
        await OnNetworkTypeChanged("TestNet");
        StateHasChanged();
    }

    private async void OnConnect()
    {
        IsSpinner = true;
        await WebSocketService.ConnectAsync("wss://alice-ws.fly.dev");
        var idData = new { id = uid };
        WebSocketService.Received += OnReceive;
        await WebSocketService.SendAsync(idData);
        await Task.Delay(1000);
    }
    
    private async void OnScrap()
    {
        IsScrapSpinner = true;
        if(Node == null) throw new Exception("Node is null");
        if(SourcePublicKey == null) throw new Exception("PublicKey is null");
        if(TargetPublicKey == null) throw new Exception("TargetPublicKey is null");
        if(metalId == null) throw new Exception("metalId is null");
        
        var config = new SymbolServiceConfig(Node);
        SymbolService = new SymbolService(config);
        await SymbolService.Init();
        MetalService = new MetalService(SymbolService);
        var networkType = NetworkType == "MainNet" ? Network.MainNet : Network.TestNet;
        var facade = new SymbolFacade(networkType);
        address = facade.Network.PublicKeyToAddress(Converter.HexToBytes(SourcePublicKey)).ToString();
        
        var sourcePublicKey = new PublicKey(Converter.HexToBytes(SourcePublicKey));
        var targetPublicKey = new PublicKey(Converter.HexToBytes(TargetPublicKey));

        var firstChunk = await MetalService.GetFirstChunk(metalId);
        var txs = await MetalService.CreateScrapTxs(MetadataType.Account, sourcePublicKey, targetPublicKey, Convert.ToUInt64(firstChunk.scopedMetadataKey, 16))!;
        var hostUrl = NavigationManager.BaseUri;
        var callbackURL = $"{hostUrl}SendMetal?uid={uid}&node={Converter.Utf8ToHex(Node)}";
        alice = $"alice://sign?type=request_sign_batches&method=post&callback={Converter.Utf8ToHex(callbackURL)}";

        if (txs != null)
            for (var i = 0; i < txs.Count; i++)
            {
                alice += $"&batch{i}={Converter.BytesToHex(txs[i].Serialize())}";
            }
        isScraped = true;
        IsScrapSpinner = false;
        StateHasChanged();
    }
    
    private void OpenAlice()
    {
        if (alice != null) NavigationManager.NavigateTo(alice);
    }
    
    private void OnReceive(string m)
    {
        try
        {
            Console.WriteLine("Received message: " + m);
            HashCheck(m);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private async void HashCheck(string hashs)
    {
        if (results == null) throw new Exception("results is null");
        
        if (Node == null) throw new Exception("Node is null");
        if (address == null) throw new Exception("address is null");
        var hashArray = hashs.Split("_");

        foreach (var hash in hashArray)
        {
            var r = new Result
            {
                hash = hash
            };
            results.Add(r);
        }
        foreach (var r in results)
        {
            var cancellationTokenSource = new CancellationTokenSource();
            var token = cancellationTokenSource.Token;
            using var w = new ClientWebSocket();
            var websocket = new ListenerService(Node, w);
            using var w2 = new ClientWebSocket();
            var websocket2 = new ListenerService(Node, w2);

            try
            {
                var jsonString = await NodeServices.GetDataFromApi(Node, $"/transactionStatus/{r.hash}");
                var json = JsonNode.Parse(jsonString);
                if ((string) json?["code"]! == "Success" && (string) json?["group"]! == "confirmed")
                {
                    r.status = Status.Success;
                    await CheckStatus();
                    return;
                }
            }
            catch
            {
                // ignored
            }
            await websocket.Open();
            var confirmedTask = websocket.Confirmed(address, token, async (tx) =>
            {
                if ((string) tx["meta"]?["hash"]! == r.hash)
                {
                    r.status = Status.Success;
                    websocket.Close();
                    await CheckStatus();
                }
                if (token.IsCancellationRequested)
                {
                    websocket.Close();
                }
            });
            await websocket2.Open();
            var statusTask = websocket2.Status(address, token, async (n) =>
            {
                if (token.IsCancellationRequested)
                {
                    websocket2.Close();
                    return;
                }
                websocket2.Close();
                r.status = Status.Error;
                r.code = (string) n["code"]!;
                await CheckStatus();
            });
            await Task.WhenAll(confirmedTask, statusTask);
        }
    }
    
    private async Task CheckStatus()
    {
        if (results == null) throw new Exception("results is null");
        if (results.All(x => x.status == Status.Success))
        {
            isAnnouceSuccessed = true;
            IsSpinner = false;
            StateHasChanged();
            await Task.Delay(2000);
        }
        if(results.Find(x=> x.status == Status.Error) != null)
        {
            isAnnouceSuccessed = false;
            errorMessage = results.Find(x=> x.status == Status.Error)!.code;
            IsSpinner = false;
            StateHasChanged();
        }
    }
    
    private async Task OnNetworkTypeChanged(string newValue)
    {
        NetworkType = newValue;
        Node = await NodeServices.GetNode(NetworkType);
        StateHasChanged();
    }
    
    private class Result
    {
        public string? hash { get; set; }
        public Status status { get; set; }
        public string? code { get; set; }
    }
    
    private enum Status
    {
        Success,
        Error
    }
}