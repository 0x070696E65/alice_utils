@using BlazorStrap
@using System.Text.Json
@using System.Text.Json.Nodes
@using System.Text
@using aLice_utils.Shared.Models.Transaction
@inject NavigationManager NavigationManager
@inject IJSRuntime _js
@implements IAsyncDisposable

<BSRow MarginBottom="Margins.Medium">
    <BSCol>
        <BSButton Color="BSColor.Success" OnClick="@GetPublicKey">PublicKey</BSButton></BSCol>
</BSRow>

@if (showSpinner)
{
    <BSContainer>
        <BSRow MarginBottom="Margins.Medium" Justify="Justify.Center">
            <BSCol Column="2">
                <BSSpinner Color="BSColor.Secondary" Class="align-content-center"/>
            </BSCol>
        </BSRow>
    </BSContainer>
}
@if (IsOfflineAnnounceResult)
{
    <BSRow MarginBottom="Margins.Medium">
        <BSLabel Class="text-success">
            @OfflineAnnounceResult
        </BSLabel>
    </BSRow>
}
@if (IsOfflineAnnounceResultError)
{
    <BSRow MarginBottom="Margins.Medium">
        <BSLabel Class="text-danger">
            @OfflineAnnounceResultError
        </BSLabel>
    </BSRow>
}
@if (isResult)
{
    if (hash != null)
    {
        <BSRow MarginBottom="Margins.Medium">
            <BSInputGroup>
                <span class="@BS.Input_Group_Text">Hash</span>
                <BSInput InputType="InputType.Text" placeholder="hash" @bind-Value="hash"/>
            </BSInputGroup>
        </BSRow>   
    }
    <BSRow MarginBottom="Margins.Medium">
        <BSInputGroup>
            <span class="@BS.Input_Group_Text">aLice code</span>
            <BSInput InputType="InputType.TextArea" placeholder="aLice" @bind-Value="alice"/>
        </BSInputGroup>
    </BSRow>
    <BSRow MarginBottom="Margins.Medium">
        <BSCol>
            <BSButton Color="BSColor.Success" OnClick="@OpenAlice">To aLice</BSButton>
        </BSCol>
        <BSCol>
            <BSButton Color="BSColor.Secondary" OnClick="@Sign">SSS</BSButton>
            </BSCol>
    </BSRow>  
    <BSRow MarginBottom="Margins.Medium">
        <BSImage Source="@qrSource" Class="img-fluid"></BSImage>
    </BSRow> 
}

@code {
    private IJSObjectReference? _module;
    private IJSObjectReference? _class;

    private async void Sign()
    {
        if (_class is null) return;
        var signed = await _class.InvokeAsync<object>("signTransaction", payload);
        var result = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(signed.ToString() ?? string.Empty);

        if (result != null)
        {
            if (transactionMeta == null) return;
            await Announce(transactionMeta.Node, (string)result.payload);
            var explorer = transactionMeta.NetworkType == "MainNet" ? "https://symbol.fyi/" : "https://testnet.symbol.fyi/";
            await _class.InvokeVoidAsync("openLink", $"{explorer}transactions/{result.hash}");
        }
    }
    
    private async void GetPublicKey()
    {
        if (_class is null) return;
        await _class.InvokeVoidAsync("getPublicKey");
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await _js.InvokeAsync<IJSObjectReference>(
                "import", "./js/sss.js"
            );
            _class = await _module.InvokeAsync<IJSObjectReference>("SSS.create");
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_module is not null) 
            try { await _module.DisposeAsync(); }
            catch
            {
                // ignored
            }
    }
    
    static async Task<string> Announce(string node, string payload)
    {
        using var client = new HttpClient();
        var payloadJson = "{\"payload\":\"" + payload + "\"}";
        var content = new StringContent(payloadJson, Encoding.UTF8, "application/json");
        var response =  await client.PutAsync($"{node}/transactions", content);
        return await response.Content.ReadAsStringAsync();
    }
    
    [Parameter]
    public string? qrSource { get; set; }
    
    [Parameter]
    public string? alice {get; set;}
    
    [Parameter]
    public string? payload {get; set;}
    
    [Parameter]
    public TransactionMeta? transactionMeta {get; set;}

    [Parameter]
    public bool isResult { get; set; }
    
    [Parameter]
    public bool showSpinner { get; set; }
    
    [Parameter]
    public string? hash { get; set; }

    [Parameter]
    public bool IsOfflineAnnounceResult { get; set; } = false;
    
    [Parameter]
    public bool IsOfflineAnnounceResultError { get; set; } = false;

    [Parameter]
    public string OfflineAnnounceResult { get; set; } = "";
    
    [Parameter]
    public string OfflineAnnounceResultError { get; set; } = "";
    
    private void OpenAlice()
    {
        if (alice != null) NavigationManager.NavigateTo(alice);
    }
}
