@using BlazorStrap
@using CatSdk.Utils
@using BlazorStrap.Extensions.FluentValidation
@using aLice_utils.Client.Services
@using aLice_utils.Shared.Models
@using aLice_utils.Shared.Models.Transaction
@using CatSdk.Facade
@using CatSdk.Symbol

<BSLabel Class="fw-bold" Size="Size.ExtraLarge">AggregateCompleteTransaction</BSLabel>

<BSForm Model="Transaction" OnValidSubmit="Submit">
    <FluentValidator TValidator="Validator.AggregateCompleteTransactionValidator" />
    <TransactionHeader TransactionMeta="Transaction.TransactionMeta"></TransactionHeader>
    
    <BSDropdown>
        <Toggler><BSToggle IsButton="true" Color="BSColor.Secondary">Add Transaction</BSToggle></Toggler>
        <Content>
            @foreach (var option in TransactionTypeExtension.GetInnerTransactionTypeList())
            {
                <BSDropdownItem OnClick="() => AddTransaction(option)">@option</BSDropdownItem>
            }
        </Content>
    </BSDropdown>
    
    <BSRow MarginBottom="Margins.Medium" MarginTop="Margins.Medium">
            @foreach (var transactionComponent in transactionComponents)
            {
                <BSCard CardType="CardType.Card" MarginBottom="Margins.Medium" PaddingTop="Padding.Medium">
                    <BSLabel Class="fw-bold">@GenerateKey(transactionComponent.Key)</BSLabel>
                    @transactionComponent.Value
                    <BSCol MarginBottom="Margins.Medium" Column="3">
                        <BSButton Color="BSColor.Danger" IsOutlined="true" OnClick="() => RemoveTransaction(transactionComponent.Key)">-</BSButton>
                    </BSCol>
                </BSCard>
            }
    </BSRow>
    
    <BSRow MarginBottom="Margins.Medium">
        <BSInputGroup>
            <BSInputSwitch CheckedValue="@("true")" UnCheckedValue="@("false")" @bind-Value="Transaction.IsAnnounce">
                Announce @Transaction.IsAnnounce</BSInputSwitch>
        </BSInputGroup>
    </BSRow>
    <BSRow MarginBottom="Margins.Medium">
        <BSInputGroup>
            <span class="@BS.Input_Group_Text">CosignatureCount</span>
            <BSInput InputType="InputType.Number" placeholder="CosignatureCount" @bind-Value="Transaction.CosignatureCount"/>
        </BSInputGroup>
        <ValidationMessage For="@(() => Transaction.CosignatureCount)" />
    </BSRow>
    
    <BSInputGroup MarginBottom="Margins.Medium">
        <BSButton IsSubmit="true" Color="BSColor.Primary">Submit</BSButton>
    </BSInputGroup>
</BSForm>
<Result qrSource="@qrSource" alice="@alice" isResult="@isResult" showSpinner="@showSpinner"></Result>

@code {
    public readonly aLice_utils.Shared.Models.Transaction.AggregateCompleteTransaction Transaction = new ();
    private readonly Dictionary<string, RenderFragment> transactionComponents = new ();
    private int componentCounter;
    
    private string? qrSource;
    string? alice;
    bool isResult;
    bool showSpinner;

    private void AddTransaction(string option)
    {
        var uniqueKey = GenerateUniqueKey(option);
        var transactionComponent = CreateTransactionComponent(option, uniqueKey);
        transactionComponents.Add(uniqueKey, transactionComponent);
    }
    
    private void RemoveTransaction(string key)
    {
        transactionComponents.Remove(key);
        Transaction.Transactions.Remove(key);
    }
    
    private RenderFragment CreateTransactionComponent(string option, string uniqueKey)
    {
        componentCounter++;
        var localCounter = componentCounter;
        var tx = (IInnerTransaction)SymbolBuilderService.CreateTransactionInstance(option, true);
        Transaction.Transactions.Add(uniqueKey, tx);
        
        return builder =>
        {
            try
            {
                builder.OpenComponent(localCounter, Type.GetType($"aLice_utils.Client.Components.TransactionForms.{option}") ?? throw new InvalidOperationException());
                builder.AddAttribute(localCounter, "InnerTransaction", tx);
                builder.CloseElement();

            }
            catch
            {            
                builder.OpenElement(localCounter, "div");
                builder.AddContent(localCounter, $"Transaction type {option} is not implemented yet");
                builder.CloseElement();
            }
        };
    }
    
    private async void Submit()
    {
        showSpinner = true;
        var aggTx = SymbolBuilderService.BuildTransaction(Transaction);
        TransactionHelper.SetMaxFee(aggTx, int.Parse(Transaction.TransactionMeta.FeeMultiplier), Transaction.CosignatureCount);
        
        alice = Transaction.IsAnnounce == "true" 
            ? $"alice://sign?type=request_sign_transaction&data={Converter.BytesToHex(aggTx.Serialize())}&deadline={Transaction.TransactionMeta.Deadline}&method=announce&node={Converter.Utf8ToHex(Transaction.TransactionMeta.Node)}" 
            : $"alice://sign?type=request_sign_transaction&data={Converter.BytesToHex(aggTx.Serialize())}&deadline={Transaction.TransactionMeta.Deadline}";
        qrSource = await QRServices.GenerateQR(alice);
        
        showSpinner = false;
        isResult = true;
        StateHasChanged();
    }
    
    private static string GenerateUniqueKey(string option)
    {
        return $"{option}_{DateTime.Now.Ticks}";
    }
    
    private static string GenerateKey(string uniqueKey)
    {
        return uniqueKey.Split("_")[0];
    }
}