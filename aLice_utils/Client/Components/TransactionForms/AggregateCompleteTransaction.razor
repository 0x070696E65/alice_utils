@using BlazorStrap
@using CatSdk.Utils
@using BlazorStrap.Extensions.FluentValidation
@using aLice_utils.Client.Services
@using aLice_utils.Shared.Models
@using aLice_utils.Shared.Models.Transaction

<h3>AggregateCompleteTransaction</h3>
<BSForm Model="Transaction" OnValidSubmit="Submit">
    <FluentValidator TValidator="Validator.AggregateCompleteTransactionValidator" />
    <TransactionHeader TransactionMeta="Transaction.TransactionMeta"></TransactionHeader>
    
    <BSDropdown>
        <Toggler><BSToggle IsButton="true" Color="BSColor.Secondary">Add Transaction</BSToggle></Toggler>
        <Content>
            @foreach (var option in TransactionTypeExtension.GetInnerTransactionTypeList())
            {
                <BSDropdownItem OnClick="() => AddTransaction(option)">@option</BSDropdownItem>
            }
        </Content>
    </BSDropdown>
    
    <BSRow MarginBottom="Margins.Medium" MarginTop="Margins.Medium">
            @foreach (var transactionComponent in transactionComponents)
            {
                <BSCard CardType="CardType.Card" MarginBottom="Margins.Medium" PaddingTop="Padding.Medium">
                    <BSLabel Class="fw-bold">@transactionComponent.Keys.First()</BSLabel>
                    @transactionComponent.Values.First()
                </BSCard>
            }
    </BSRow>
    
    <BSInputGroup MarginBottom="Margins.Medium">
        <BSButton IsSubmit="true" Color="BSColor.Primary">Submit</BSButton>
    </BSInputGroup>
</BSForm>
<Result qrSource="@qrSource" alice="@alice" isResult="@isResult" showSpinner="@showSpinner"></Result>

@code {
    public readonly aLice_utils.Shared.Models.Transaction.AggregateCompleteTransaction Transaction = new ();
    private readonly List<Dictionary<string, RenderFragment>> transactionComponents = new ();
    private int componentCounter;
    
    private string? qrSource;
    string? alice;
    bool isResult;
    bool showSpinner;

    private void AddTransaction(string option)
    {
        var transactionComponent = CreateTransactionComponent(option);
        transactionComponents.Add(new Dictionary<string, RenderFragment>()
        {
            {option, transactionComponent}
        });
    }
    
    private RenderFragment CreateTransactionComponent(string option)
    {
        componentCounter++;
        var localCounter = componentCounter;
        IInnerTransaction? tx = null;
        if (option == "TransferTransaction")
        {
            tx = new InnerTransferTransaction();
            Transaction.Transactions.Add(tx);
        } else if (option == "MosaicDefinitionTransaction")
        {
            tx = new InnerMosaicDefinitionTransaction();
            Transaction.Transactions.Add(tx);
        }
        
        return builder =>
        {
            try
            {
                builder.OpenComponent(localCounter, Type.GetType($"aLice_utils.Client.Components.TransactionForms.{option}") ?? throw new InvalidOperationException());
                builder.AddAttribute(localCounter, "InnerTransaction", tx);
                builder.CloseElement();

            }
            catch
            {            
                builder.OpenElement(localCounter, "div");
                builder.AddContent(localCounter, $"Transaction type {option} is not implemented yet");
                builder.CloseElement();
            }
        };
    }
    
    private async void Submit()
    {
        showSpinner = true;
        var aggTx = SymbolBuilderService.BuildTransaction(Transaction);
        TransactionHelper.SetMaxFee(aggTx, int.Parse(Transaction.TransactionMeta.FeeMultiplier));
        
        alice = $"alice://sign?type=request_sign_transaction&data={Converter.BytesToHex(aggTx.Serialize())}&deadline={Transaction.TransactionMeta.Deadline}&method=announce&node={Converter.Utf8ToHex(Transaction.TransactionMeta.Node)}";
        qrSource = await QRServices.GenerateQR(alice);
        
        showSpinner = false;
        isResult = true;
        StateHasChanged();
    }
}