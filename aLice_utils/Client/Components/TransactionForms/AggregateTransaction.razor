@using BlazorStrap
@using aLice_utils.Client.Services
@using aLice_utils.Shared.Models
@using aLice_utils.Shared.Models.Transaction

<BSRow MarginBottom="Margins.Medium">
    <BSInputGroup>
        <span class="@BS.Input_Group_Text">SignerPublicKey</span>
        <BSInput InputType="InputType.Text" placeholder="空欄の場合はaLiceアカウント" @bind-Value="InnerTransaction.SignerPublicKey"/>
    </BSInputGroup>
    <ValidationMessage For="@(() => InnerTransaction.SignerPublicKey)" />
</BSRow>

<BSDropdown>
    <Toggler><BSToggle IsButton="true" Color="BSColor.Secondary">Add Transaction</BSToggle></Toggler>
    <Content>
        @foreach (var option in TransactionTypeExtension.GetInnerTransactionTypeList())
        {
            <BSDropdownItem OnClick="() => AddTransaction(option)">@option</BSDropdownItem>
        }
    </Content>
</BSDropdown>

<BSRow MarginBottom="Margins.Medium" MarginTop="Margins.Medium">
    @foreach (var transactionComponent in transactionComponents)
    {
        <BSCard CardType="CardType.Card" MarginBottom="Margins.Medium" PaddingTop="Padding.Medium">
            <BSLabel Class="fw-bold">@GenerateKey(transactionComponent.Key)</BSLabel>
            @transactionComponent.Value
            <BSCol MarginBottom="Margins.Medium" Column="3">
                <BSButton Color="BSColor.Danger" IsOutlined="true" OnClick="() => RemoveTransaction(transactionComponent.Key)">-</BSButton>
            </BSCol>
        </BSCard>
    }
</BSRow>
<BSRow MarginBottom="Margins.Medium">
    <BSInputGroup>
        <BSInputSwitch CheckedValue="@("true")" UnCheckedValue="@("false")" @bind-Value="InnerTransaction.IsAnnounce">
            Announce @InnerTransaction.IsAnnounce</BSInputSwitch>
    </BSInputGroup>
</BSRow>
<BSRow MarginBottom="Margins.Medium">
    <BSInputGroup>
        <span class="@BS.Input_Group_Text">CosignatureCount</span>
        <BSInput InputType="InputType.Number" placeholder="CosignatureCount" @bind-Value="InnerTransaction.CosignatureCount"/>
    </BSInputGroup>
    <ValidationMessage For="@(() => InnerTransaction.CosignatureCount)" />
</BSRow>

@code {
    [Parameter]
    public required IAggregateTransaction InnerTransaction { get; set; }
    
    [Parameter]
    public TransactionMeta TransactionMeta { get; set; } = new ();
    
    private readonly Dictionary<string, RenderFragment> transactionComponents = new ();
    private int componentCounter;
  
    private void AddTransaction(string option)
    {
        var uniqueKey = GenerateUniqueKey(option);
        var (tx, transactionComponent) = CreateTransactionComponent(option, uniqueKey);
        InnerTransaction.Transactions.Add(uniqueKey, tx);
        InnerTransaction.TransactionsForValidate = InnerTransaction.Transactions.Values.ToList();
        transactionComponents.Add(uniqueKey, transactionComponent);
        StateHasChanged();
    }
    
    private void RemoveTransaction(string key)
    {
        transactionComponents.Remove(key);
        InnerTransaction.Transactions.Remove(key);
        InnerTransaction.TransactionsForValidate = InnerTransaction.Transactions.Values.ToList();
        StateHasChanged();
    }
    
    private (IInnerTransaction, RenderFragment) CreateTransactionComponent(string option, string uniqueKey)
    {
        componentCounter++;
        var localCounter = componentCounter;
        var tx = (IInnerTransaction)SymbolBuilderService.CreateTransactionInstance(option, true);
        
        return (tx, builder =>
        {
            try
            {
                builder.OpenComponent(localCounter, Type.GetType($"aLice_utils.Client.Components.TransactionForms.{option}") ?? throw new InvalidOperationException());
                builder.AddAttribute(localCounter, "InnerTransaction", tx);
                builder.AddAttribute(localCounter, "TransactionMeta", TransactionMeta);
                builder.AddAttribute(localCounter, "IsInner", true);
                builder.CloseElement();
            }
            catch
            {            
                builder.OpenElement(localCounter, "div");
                builder.AddContent(localCounter, $"Transaction type {option} is not implemented yet");
                builder.CloseElement();
            }
        });
    }
    
    private static string GenerateUniqueKey(string option)
    {
        return $"{option}_{DateTime.Now.Ticks}";
    }
    
    private static string GenerateKey(string uniqueKey)
    {
        return uniqueKey.Split("_")[0];
    }
}