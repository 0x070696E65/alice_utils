@using BlazorStrap
@using aLice_utils.Shared.Models.Transaction
@using CatSdk.Facade
@using CatSdk.Symbol
@using CatSdk.Utils

<BSRow MarginBottom="Margins.Medium">
    <BSInputGroup>
        <span class="@BS.Input_Group_Text">SignerPublicKey</span>
        <BSInput InputType="InputType.Text" placeholder="空欄の場合はaLiceアカウント" @bind-Value="InnerTransaction.SignerPublicKey"/>
    </BSInputGroup>
    <ValidationMessage For="@(() => InnerTransaction.SignerPublicKey)" />
</BSRow>
<BSRow MarginBottom="Margins.Medium">
    <BSInputGroup>
        <span class="@BS.Input_Group_Text">Duration</span>
        <BSInput InputType="InputType.Number" placeholder="Duration" @bind-Value="InnerTransaction.Duration"/>
    </BSInputGroup>
    <ValidationMessage For="@(() => InnerTransaction.Duration)" />
</BSRow>
<BSRow MarginBottom="Margins.Medium">
    <BSInputGroup>
        <span class="@BS.Input_Group_Text">SignedPayload</span>
        <BSInput InputType="InputType.TextArea" placeholder="SignedPayload" @bind-Value="SignedPayload"/>
    </BSInputGroup>
    <ValidationMessage For="@(() => SignedPayload)" />
</BSRow>
<BSRow MarginBottom="Margins.Medium">
    <BSInputGroup>
        <span class="@BS.Input_Group_Text">Hash</span>
        <BSInput InputType="InputType.Text" placeholder="Hash" @bind-Value="InnerTransaction.Hash"/>
        <BSButton OnClick="@CreateHash" Class="btn-success">+</BSButton>
    </BSInputGroup>
    <ValidationMessage For="@(() => InnerTransaction.Hash)" />
</BSRow>
@code {
    [Parameter]
    public InnerHashLockTransaction InnerTransaction { get; set; } = new ();
    
    [Parameter]
    public TransactionMeta TransactionMeta { get; set; } = new ();
    
    [Parameter]
    public bool IsInner { get; set; } = false;
    
    private string SignedPayload { get; set; } = "";

    private void CreateHash()
    {
        var tx = CatSdk.Symbol.TransactionFactory.Deserialize(SignedPayload);
        var facade = new SymbolFacade(tx.Network == NetworkType.MAINNET ? Network.MainNet : Network.TestNet);
        var hash = facade.HashTransaction(tx);
        InnerTransaction.Hash = Converter.BytesToHex(hash.bytes);
    }
}