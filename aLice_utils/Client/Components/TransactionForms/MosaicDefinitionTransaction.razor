@using BlazorStrap
@using CatSdk.Utils
@using BlazorStrap.Extensions.FluentValidation
@using aLice_utils.Client.Services

<h3>MosaicDefinitionTransaction</h3>
<BSForm Model="Transaction" OnValidSubmit="Submit">
    <FluentValidator TValidator="Validator.MosaicDefinitionTransactionValidator" />
    <TransactionHeader TransactionMeta="Transaction.TransactionMeta"></TransactionHeader>
    <MosaicDefinitionTransactionBody InnerTransaction="Transaction.InnerTransaction" TransactionMeta="Transaction.TransactionMeta"/>
    <BSInputGroup MarginBottom="Margins.Medium">
        <BSButton IsSubmit="true" Color="BSColor.Primary">Submit</BSButton>
    </BSInputGroup>
</BSForm>
<Result qrSource="@qrSource" alice="@alice" isResult="@isResult" showSpinner="@showSpinner"></Result>

@code {
    public readonly aLice_utils.Shared.Models.Transaction.MosaicDefinitionTransaction Transaction = new ();
    private string? qrSource;
    string? alice;
    bool isResult;
    bool showSpinner;
    
    private async void Submit()
    {
        showSpinner = true;
        var tx = SymbolBuilderService.BuildTransaction(Transaction);
        TransactionHelper.SetMaxFee(tx, int.Parse(Transaction.TransactionMeta.FeeMultiplier));
        alice = $"alice://sign?type=request_sign_transaction&data={Converter.BytesToHex(tx.Serialize())}&deadline={Transaction.TransactionMeta.Deadline}&method=announce&node={Converter.Utf8ToHex(Transaction.TransactionMeta.Node)}";
        qrSource = await QRServices.GenerateQR(alice);
        showSpinner = false;
        isResult = true;
        StateHasChanged();
    }
}