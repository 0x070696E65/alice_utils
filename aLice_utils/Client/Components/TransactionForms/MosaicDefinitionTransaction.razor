@using BlazorStrap
@using CatSdk.Crypto
@using CatSdk.Facade
@using CatSdk.Symbol
@using CatSdk.Utils
@using aLice_utils.Shared.Models.Transaction

<BSRow MarginBottom="Margins.Medium">
    <BSInputGroup>
        <span class="@BS.Input_Group_Text">SignerPublicKey</span>
        <BSInput InputType="InputType.Text" placeholder="モザイク定義には署名者の公開鍵が必要です" @bind-Value="InnerTransaction.SignerPublicKey"/>
    </BSInputGroup>
    <ValidationMessage For="@(() => InnerTransaction.SignerPublicKey)" />
</BSRow>
<BSRow MarginBottom="Margins.Medium">
    <BSInputGroup>
        <span class="@BS.Input_Group_Text">MosaicID</span>
        <BSInput InputType="InputType.Text" placeholder="MosaicID" @bind-Value="InnerTransaction.MosaicID"/>
        <BSButton Color="BSColor.Success" OnClick="@GenerateMosaicID">+</BSButton>
    </BSInputGroup>
    <BSLabel IsHidden="!isAlertMosaicID" Class="text-danger">モザイクID定義には正しい公開鍵が必要です</BSLabel>
    <ValidationMessage For="@(() => InnerTransaction.MosaicID)" />
</BSRow>
<BSRow MarginBottom="Margins.Medium">
    <BSInputGroup>
        <span class="@BS.Input_Group_Text">Duration</span>
        <BSInput InputType="InputType.Number" placeholder="Duration" @bind-Value="InnerTransaction.Duration"/>
    </BSInputGroup>
    <ValidationMessage For="@(() => InnerTransaction.Duration)" />
</BSRow>
<BSRow MarginBottom="Margins.Medium">
    <BSInputGroup>
        <span class="@BS.Input_Group_Text">Divisibility</span>
        <BSInput InputType="InputType.Number" placeholder="Divisibility" @bind-Value="InnerTransaction.Divisibility"/>
    </BSInputGroup>
    <ValidationMessage For="@(() => InnerTransaction.Divisibility)" />
</BSRow>
<BSRow MarginBottom="Margins.Medium" MarginStart="Margins.ExtraSmall">
    <BSInputSwitch CheckedValue="@("true")" UnCheckedValue="@("false")" @bind-Value="InnerTransaction.SupplyMutable">
        SupplyMutable @InnerTransaction.SupplyMutable
    </BSInputSwitch>
    <BSInputSwitch CheckedValue="@("true")" UnCheckedValue="@("false")" @bind-Value="InnerTransaction.Transferable">
        Transferable @InnerTransaction.Transferable
    </BSInputSwitch>
    <BSInputSwitch CheckedValue="@("true")" UnCheckedValue="@("false")" @bind-Value="InnerTransaction.Restrictable">
        Restrictable @InnerTransaction.Restrictable
    </BSInputSwitch>
    <BSInputSwitch CheckedValue="@("true")" UnCheckedValue="@("false")" @bind-Value="InnerTransaction.Revokable">
        Revokable @InnerTransaction.Revokable
    </BSInputSwitch>
</BSRow>
@code {
    [Parameter]
    public InnerMosaicDefinitionTransaction InnerTransaction { get; set; } = new ();
    
    [Parameter]
    public TransactionMeta TransactionMeta { get; set; } = new ();

    [Parameter]
    public bool IsInner { get; set; } = false;
    
    bool isAlertMosaicID;
    
    private async Task GenerateMosaicID()
    {
        try
        {
            InnerTransaction.Nonce = BitConverter.ToUInt32(Crypto.RandomBytes(8), 0);
            var networkType = TransactionMeta.NetworkType == "MainNet" ? Network.MainNet : Network.TestNet;
            var facade = new SymbolFacade(networkType);
            var publicKey = new PublicKey(Converter.HexToBytes(InnerTransaction.SignerPublicKey));
            var address = facade.Network.PublicKeyToAddress(publicKey);
            var mosaicId = IdGenerator.GenerateMosaicId(address, InnerTransaction.Nonce);
            InnerTransaction.MosaicID = mosaicId.ToString("X16");
            isAlertMosaicID = false;
        }
        catch
        {
            isAlertMosaicID = true;
            await Task.Delay(2000);
            isAlertMosaicID = false;
        }
    }
}